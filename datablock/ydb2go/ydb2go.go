package main // import "github.com/neoul/gostudy/datablock/ydb2go"

import (
	"os"

	"github.com/neoul/gostudy/datablock/log"
	"github.com/neoul/gostudy/datablock/model/object"
	"github.com/neoul/libydb/go/ydb"

	"github.com/openconfig/goyang/pkg/yang"
	"github.com/openconfig/ygot/ytypes"
)

// Generate rule to create the example structs:
//go:generate go run ../../../github.com/openconfig/ygot/generator/generator.go -path=yang -output_file=object/example.go -package_name=object -generate_fakeroot -fakeroot_name=device yang/example.yang

var (
	// Schema is schema information generated by ygot
	Schema *ytypes.Schema
	// Entries is yang.Entry list rearranged by name
	Entries map[string][]*yang.Entry

	ylog log.Log
)

func init() {
	ylog = log.NewLog("ydb2go", os.Stdout)
	schema, err := object.Schema()
	if err != nil {
		ylog.Panicf("%s\n", err)
	}
	Schema = schema
	Entries = make(map[string][]*yang.Entry)
	for _, branch := range object.SchemaTree {
		entries, _ := Entries[branch.Name]
		entries = append(entries, branch)
		for _, leaf := range branch.Dir {
			entries = append(entries, leaf)
		}
		Entries[branch.Name] = entries
		// if branch.Annotation["schemapath"] == "/" {
		// 	SchemaRoot = branch
		// }
	}
	// for _, i := range Entries {
	// 	for _, j := range i {
	// 		ylog.Debug(j)
	// 	}
	// }
}

func find(entry *yang.Entry, keys ...string) *yang.Entry {
	var found *yang.Entry
	if entry == nil {
		return nil
	}
	if len(keys) > 1 {
		found = entry.Dir[keys[0]]
		if found == nil {
			return nil
		}
		found = find(found, keys[1:]...)
	} else {
		found = entry.Dir[keys[0]]
	}
	return found
}

// Updater interface to build go struct
type Updater interface {
	Create(keys []string, key string, tag string, value string) error
}

// DefaultStruct - Default Go Struct for YDB unmarshal
type DefaultStruct map[string]interface{}

// Create - constructs the DefaultStruct structure 
func (defStruct *DefaultStruct) Create(keys []string, key string, tag string, value string) error {
	ds := defStruct
	for _, k := range keys {
		ds = (*ds)[k].(*DefaultStruct)
	}
	if value == "" {
		(*ds)[key] = &DefaultStruct{}
	} else {
		(*ds)[key] = value
	}
	return nil
}

// GoStruct - Go Struct for YDB unmarshal
type GoStruct object.Device

// Create - constructs the DefaultStruct structure 
func (device *GoStruct) Create(keys []string, key string, tag string, value string) error {
	// ds := root
	// for _, k := range keys {
	// 	ds = (*ds)[k].(*DefaultStruct)
	// }
	// if value == "" {
	// 	(*ds)[key] = &DefaultStruct{}
	// } else {
	// 	(*ds)[key] = value
	// }
	return nil
}

func update(keys []string, node *ydb.YNode, target Updater) {
	childnodes := node.GetChildren()
	for i, childnode := range childnodes {
		ylog.Debugf("%d:%d. %s", len(keys), i, childnode.GetKey())
		target.Create(keys, childnode.GetKey(), childnode.GetTag(), childnode.GetValue())
		update(append(keys, childnode.GetKey()), childnode, target)
	}
}


func Ydb2Go(node *ydb.YNode, target Updater) {
	update([]string{}, node, target)
}

func main() {
	device := Schema.Root
	ylog.Debug(device)

	db, close := ydb.Open("mydb")
	defer close()
	// ydb.SetLog(ydb.LogDebug)

	r, err := os.Open("../model/data/object.yaml")
	defer r.Close()
	if err != nil {
		ylog.Fatal(err)
	}
	dec := db.NewDecoder(r)
	dec.Decode()
	node := db.Retrieve(ydb.RetrieveAll())

	ds := DefaultStruct{}
	Ydb2Go(node, &ds)
	ylog.Debug(ds)
}
